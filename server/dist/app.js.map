{"version":3,"sources":["../src/app.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,UAAU,QAAQ,SAAR,CAAd;AAAA,IACE,OAAO,QAAQ,MAAR,CADT;AAAA,IAEE,UAAU,QAAQ,eAAR,CAFZ;AAAA,IAGE,eAAe,QAAQ,eAAR,CAHjB;AAAA,IAIE,aAAa,QAAQ,aAAR,CAJf;AAAA,IAKE,aAAa,QAAQ,aAAR,CALf;;AAOA,IAAI,SAAS,QAAQ,UAAR,CAAb;AAAA,IACE,YAAY,OAAO,cAAP,CAAsB,QAAQ,GAAR,CAAY,QAAlC,CADd;AAAA,IAEE,SAAS,QAAQ,UAAR,CAFX;AAAA,IAGE,aAAa,QAAQ,wBAAR,CAHf;AAAA,IAIE,aAAa,QAAQ,eAAR,CAJf;AAAA,IAKE,eAAe,QAAQ,0BAAR,CALjB;AAAA,IAME,mBAAmB,QAAQ,8BAAR,CANrB;AAAA,IAOE,gBAAgB,QAAQ,2BAAR,CAPlB;AAAA,IAQE,kBAAkB,QAAQ,6BAAR,CARpB;AAAA,IASE,eAAe,QAAQ,0BAAR,CATjB;AAAA,IAUE,gBAAgB,QAAQ,2BAAR,CAVlB;AAAA,IAWE,wBAAwB,QAAQ,mCAAR,CAX1B;;AAaA,IAAI,MAAM,SAAV;;AAEA,IAAI,aAAa,KAAK,IAAL,CAAU,SAAV,EAAqB,UAAU,OAAV,CAAkB,UAAvC,CAAjB;;AAEA,IAAI,GAAJ,CAAQ,QAAQ,KAAK,IAAL,CAAU,UAAV,EAAsB,qBAAtB,CAAR,CAAR;AACA,IAAI,GAAJ,CAAQ,WAAW,IAAX,EAAR;AACA,IAAI,GAAJ,CAAQ,WAAW,UAAX,CAAsB,EAAC,UAAU,KAAX,EAAtB,CAAR;AACA,IAAI,GAAJ,CAAQ,cAAR;AACA,IAAI,GAAJ,CAAQ,WAAW;AACjB,UAAQ,UAAU,IAAV,CAAe;AADN,CAAX,EAEL,MAFK,CAEE,EAAE,MAAM,CAChB,GADgB,EAEhB,aAFgB,EAGhB,YAHgB,EAIhB,eAJgB,EAKhB,gBALgB,CAAR,EAFF,CAAR;;AAUA,IAAI,YAAY,OAAO,IAAP,CAAY,MAAZ,CAAhB;;;;;;AACA,uBAAoB,SAApB,8HAA+B;AAAA,QAAvB,QAAuB;;AAC7B,QAAI,GAAJ,CAAQ,QAAR,EAAkB,OAAO,QAAP,CAAlB;AACD;;;;;;;;;;;;;;;;AAED,WAAW,SAAX,CAAqB,UAAU,OAA/B;;AAEA,IAAI,GAAJ,CAAQ,QAAQ,MAAR,CAAe,UAAf,CAAR;;AAEA,IAAI,GAAJ,CAAQ,UAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB,IAAzB,EAA+B;;;;;;AAMrC,MAAI,MAAJ,CAAW,KAAX,GAAmB,GAAnB;AACA,MAAI,MAAJ,CAAW,IAAI,MAAJ,IAAc,GAAzB;AACA,MAAI,IAAJ,CAAS;AACP,aAAS,IAAI,OADN;AAEP,WAAO,UAAU,OAAV,CAAkB,gBAAlB,GAAqC,GAArC,GAA2C;AAF3C,GAAT;AAID,CAZD;;AAcA,WAAW,OAAX,CAAmB,UAAU,UAAV,CAAqB,IAAxC,EAA8C,IAA9C,CAAmD,YAAM;AACvD,eAAa,IAAb,GACG,IADH,CACQ,sBAAsB,IAD9B,EAEG,IAFH,CAEQ,iBAAiB,IAFzB,EAGG,IAHH,CAGQ,cAAc,IAHtB,EAIG,IAJH,CAIQ,gBAAgB,IAJxB,EAKG,IALH,CAKQ,aAAa,IALrB,EAMG,IANH,CAMQ,WAAW,KANnB,EAOG,KAPH,CAOS,eAAO;AACZ,eAAW,KAAX,CAAiB,4BAAjB,EAA+C,GAA/C;AACD,GATH;AAUD,CAXD;;AAaA,cAAc,iBAAd,CAAgC;AAAA,SAAM,WAAW,IAAX,CAAgB,sBAAhB,CAAN;AAAA,CAAhC;;AAEA,OAAO,OAAP,GAAiB,GAAjB","file":"app.js","sourcesContent":["'use strict';\n\nlet express = require('express'),\n  path = require('path'),\n  favicon = require('serve-favicon'),\n  cookieParser = require('cookie-parser'),\n  bodyParser = require('body-parser'),\n  expressJwt = require('express-jwt');\n\nlet config = require('./config'),\n  appConfig = config.setEnvironment(process.env.NODE_ENV),\n  routes = require('./routes'),\n  logService = require('./services/log-service'),\n  dataAccess = require('./data-access'),\n  boardService = require('./services/board-service'),\n  componentService = require('./services/component-service'),\n  actionService = require('./services/action-service'),\n  scheduleService = require('./services/schedule-service'),\n  eventService = require('./services/event-service'),\n  systemService = require('./services/system-service'),\n  authenticationService = require('./services/authentication-service');\n\nlet app = express();\n\nlet staticPath = path.join(__dirname, appConfig.routing.staticPath);\n\napp.use(favicon(path.join(staticPath, '/assets/favicon.ico')));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: false}));\napp.use(cookieParser());\napp.use(expressJwt({\n  secret: appConfig.auth.secret\n}).unless({ path: [\n  '/',\n  /^\\/assets\\//,\n  /^\\/fonts\\//,\n  '/api/v1/login',\n  /^\\/streaming\\//\n]}));\n\nlet routeKeys = Object.keys(routes);\nfor(let routeKey of routeKeys) {\n  app.use(routeKey, routes[routeKey]);\n}\n\nlogService.configure(appConfig.logging);\n\napp.use(express.static(staticPath));\n\napp.use(function (err, req, res, next) {\n  /* eslint no-unused-vars: 0 */\n  // Express error handling uses functions with four parameters.\n  // We need the next parameter, otherwise the function will not be\n  // recognized as an error handler\n\n  res.locals.error = err;\n  res.status(err.status || 500);\n  res.json({\n    message: err.message,\n    error: appConfig.logging.sendErrorDetails ? err : {}\n  });\n});\n\ndataAccess.connect(appConfig.dataAccess.host).then(() => {\n  boardService.load()\n    .then(authenticationService.load)\n    .then(componentService.load)\n    .then(actionService.load)\n    .then(scheduleService.load)\n    .then(eventService.load)\n    .then(dataAccess.close)\n    .catch(err => {\n      logService.error('Error loading the system: ', err);\n    });\n});\n\nsystemService.addShutdownAction(() => logService.info('Received kill signal'));\n\nmodule.exports = app;"]}