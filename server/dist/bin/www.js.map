{"version":3,"sources":["../../src/bin/www.js"],"names":[],"mappings":"AAAA;;;;;;AAMA,IAAI,OAAO,QAAQ,MAAR,CAAX;AAAA,IACE,MAAM,QAAQ,QAAR,CADR;AAAA,IAEE,2BAA2B,QAAQ,wCAAR,CAF7B;AAAA,IAGE,gBAAgB,QAAQ,4BAAR,CAHlB;AAAA,IAIE,aAAa,QAAQ,yBAAR,CAJf;;;;;AASA,IAAI,OAAO,cAAc,QAAQ,GAAR,CAAY,IAAZ,IAAoB,MAAlC,CAAX;AACA,IAAI,GAAJ,CAAQ,MAAR,EAAgB,IAAhB;;;;;AAKA,IAAI,SAAS,KAAK,YAAL,CAAkB,GAAlB,CAAb;;;;;AAKA,yBAAyB,MAAzB,CAAgC,MAAhC;;AAEA,cAAc,iBAAd,CAAgC,YAAM;AACpC,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,eAAW,IAAX,CAAgB,0BAAhB;AACA,WAAO,KAAP,CAAa,eAAO;AAClB,UAAI,GAAJ,EAAS;AACP,mBAAW,KAAX,CAAiB,qCAAqC,GAAtD;AACA;AACD,OAHD,MAGO;AACL,mBAAW,IAAX,CAAgB,8BAAhB;AACA;AACD;AACF,KARD;AASD,GAXM,CAAP;AAYD,CAbD;;;;;AAkBA,OAAO,MAAP,CAAc,IAAd;AACA,OAAO,EAAP,CAAU,OAAV,EAAmB,OAAnB;AACA,OAAO,EAAP,CAAU,WAAV,EAAuB,WAAvB;;;;;AAKA,SAAS,aAAT,CAAuB,GAAvB,EAA4B;AAC1B,MAAI,OAAO,SAAS,GAAT,EAAc,EAAd,CAAX;;AAEA,MAAI,MAAM,IAAN,CAAJ,EAAiB;;AAEf,WAAO,GAAP;AACD;;AAED,MAAI,QAAQ,CAAZ,EAAe;;AAEb,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;;;;AAKD,SAAS,OAAT,CAAiB,KAAjB,EAAwB;AACtB,MAAI,MAAM,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAM,KAAN;AACD;;AAED,MAAI,OAAO,OAAO,IAAP,KAAgB,QAAhB,GAA2B,UAAU,IAArC,GAA4C,UAAU,IAAjE;;;AAGA,UAAQ,MAAM,IAAd;AACA,SAAK,QAAL;AACE,iBAAW,KAAX,CAAiB,OAAO,+BAAxB;AACA,cAAQ,IAAR,CAAa,CAAb;AACA;AACF,SAAK,YAAL;AACE,iBAAW,KAAX,CAAiB,OAAO,oBAAxB;AACA,cAAQ,IAAR,CAAa,CAAb;AACA;AACF;AACE,YAAM,KAAN;AAVF;AAYD;;;;;AAKD,SAAS,WAAT,GAAuB;AACrB,MAAI,OAAO,OAAO,OAAP,EAAX;AAAA,MACE,OAAO,OAAO,IAAP,KAAgB,QAAhB,GAA2B,UAAU,IAArC,GAA4C,UAAU,KAAK,IADpE;;AAGA,aAAW,IAAX,CAAgB,kBAAkB,IAAlC;AACD;;AAED,OAAO,OAAP,GAAiB,MAAjB","file":"www.js","sourcesContent":["'use strict';\n\n/**\n * Module dependencies.\n */\n\nlet http = require('http'),\n  app = require('../app'),\n  liveCommunicationService = require('../services/live-communication-service'),\n  systemService = require('../services/system-service'),\n  logService = require('../services/log-service');\n\n/**\n * Get port from environment and store in Express.\n */\nlet port = normalizePort(process.env.PORT || '3000');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\nlet server = http.createServer(app);\n\n/**\n * Injects live communication.\n */\nliveCommunicationService.config(server);\n\nsystemService.addShutdownAction(() => {\n  return new Promise((resolve, reject) => {\n    logService.info('Shutting down web server');\n    server.close(err => {\n      if (err) {\n        logService.error('Error shutting down web server: ' + err);\n        reject();\n      } else {\n        logService.info('The web server was shut down');\n        resolve();\n      }\n    });\n  });\n});\n\n/**\n * Listen on provided port, on all network interfaces.\n */\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\nfunction normalizePort(val) {\n  let port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n  case 'EACCES':\n    logService.error(bind + ' requires elevated privileges');\n    process.exit(1);\n    break;\n  case 'EADDRINUSE':\n    logService.error(bind + ' is already in use');\n    process.exit(1);\n    break;\n  default:\n    throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\nfunction onListening() {\n  let addr = server.address(),\n    bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;\n\n  logService.info('Listening at ' + bind);\n}\n\nmodule.exports = server;"]}