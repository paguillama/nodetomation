{"version":3,"sources":["../../src/data-access/common-factory.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,YAAY,QAAQ,cAAR,CAAhB;;AAEA,SAAS,aAAT,CAAwB,cAAxB,EAAwC;AACtC,WAAS,MAAT,GAAmB;AACjB,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,gBAAU,EAAV,CAAa,UAAb,CAAwB,cAAxB,EAAwC,IAAxC,GAA+C,OAA/C,CAAuD,UAAU,GAAV,EAAe,KAAf,EAAsB;AAC3E,YAAI,GAAJ,EAAS;AACP,iBAAO,GAAP;AACD,SAFD,MAEO;AACL,kBAAQ,KAAR;AACD;AACF,OAND;AAOD,KARM,CAAP;AASD;;AAED,WAAS,GAAT,CAAc,GAAd,EAAmB;AACjB,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,gBAAU,EAAV,CAAa,UAAb,CAAwB,cAAxB,EAAwC,IAAxC,CAA6C,GAA7C,EAAkD,OAAlD,CAA0D,UAAU,GAAV,EAAe,KAAf,EAAsB;AAC9E,YAAI,GAAJ,EAAS;AACP,iBAAO,GAAP;AACD,SAFD,MAEO;AACL,kBAAQ,KAAR;AACD;AACF,OAND;AAOD,KARM,CAAP;AASD;;AAED,WAAS,MAAT,CAAiB,GAAjB,EAAsB;AACpB,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,gBAAU,EAAV,CAAa,UAAb,CAAwB,cAAxB,EAAwC,SAAxC,CAAkD,EAAE,KAAK,GAAP,EAAlD,EAAgE,UAAU,GAAV,EAAe,KAAf,EAAsB;AACpF,YAAI,GAAJ,EAAS;AACP,iBAAO,GAAP;AACD,SAFD,MAEO;AACL,kBAAQ,KAAR;AACD;AACF,OAND;AAOD,KARM,CAAP;AASD;;AAED,WAAS,GAAT,CAAc,IAAd,EAAoB;AAClB,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,gBAAU,EAAV,CAAa,UAAb,CAAwB,cAAxB,EAAwC,SAAxC,CAAkD,IAAlD,EAAwD,UAAU,GAAV,EAAe,MAAf,EAAuB;AAC7E,YAAI,GAAJ,EAAS;AACP,iBAAO,GAAP;AACD,SAFD,MAEO;AACL,kBAAQ,MAAR;AACD;AACF,OAND;AAOD,KARM,CAAP;AASD;;AAED,SAAO;AACL,YAAQ,MADH;AAEL,SAAK,GAFA;AAGL,YAAQ,MAHH;AAIL,SAAK;AAJA,GAAP;AAMD;;AAED,OAAO,OAAP,GAAiB,aAAjB","file":"common-factory.js","sourcesContent":["'use strict';\n\nlet dbManager = require('./db-manager');\n\nfunction commonFactory (collectionName) {\n  function getAll () {\n    return new Promise((resolve, reject) => {\n      dbManager.db.collection(collectionName).find().toArray(function (err, items) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(items);\n        }\n      });\n    });\n  }\n\n  function get (key) {\n    return new Promise((resolve, reject) => {\n      dbManager.db.collection(collectionName).find(key).toArray(function (err, items) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(items);\n        }\n      });\n    });\n  }\n\n  function remove (key) {\n    return new Promise((resolve, reject) => {\n      dbManager.db.collection(collectionName).deleteOne({ key: key }, function (err, items) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(items);\n        }\n      });\n    });\n  }\n\n  function add (item) {\n    return new Promise((resolve, reject) => {\n      dbManager.db.collection(collectionName).insertOne(item, function (err, dbItem) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(dbItem);\n        }\n      });\n    });\n  }\n\n  return {\n    getAll: getAll,\n    get: get,\n    remove: remove,\n    add: add\n  };\n}\n\nmodule.exports = commonFactory;"]}