{"version":3,"sources":["../../src/routes/streaming.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,SAAS,QAAQ,SAAR,EAAmB,MAAnB,EAAb;AAAA,IACE,aAAa,QAAQ,aAAR,EAAuB,UADtC;AAAA,IAEE,MAAM,QAAQ,aAAR,CAFR;AAAA,IAGE,aAAa,QAAQ,yBAAR,CAHf;AAAA,IAIE,SAAS,QAAQ,WAAR,CAJX;AAAA,IAKE,gBAAgB,QAAQ,uCAAR,CALlB;;;AAQA,SAAS,cAAT,CAAyB,SAAzB,EAAoC;AAClC,MAAI,iBAAiB;AACnB,gBAAY,GADO;AAEnB,kBAAc;AAFK,GAArB;;AAKA,aAAW,KAAX,CAAiB,WAAjB,EAA8B,SAA9B;;AAEA,SAAO,eAAe,SAAf,KAA6B,GAApC;AACD;;AAED,IAAI,gBAAgB,EAApB;AACA,SAAS,YAAT,CAAsB,MAAtB,EAA8B,GAA9B,EAAmC,GAAnC,EAAwC;AACtC,gBAAc,OAAO,GAArB,IAA4B,IAAI,UAAJ,CAAe,OAAO,KAAP,CAAa,GAA5B,EAAiC,YAA7D;AACA,gBAAc,OAAO,GAArB,EAA0B,GAA1B,EAA+B,GAA/B;AACD;;AAED,OAAO,GAAP,CAAW,IAAI;AACb,UAAQ,OAAO,aAAP,CAAqB,IAArB,CAA0B,MADrB;AAEb,uBAAqB,KAFR;AAGb,YAAU,SAAS,oBAAT,CAA+B,GAA/B,EAAoC;AAC5C,QAAI,IAAI,KAAJ,IAAa,IAAI,KAAJ,CAAU,KAA3B,EAAkC;AAChC,aAAO,IAAI,KAAJ,CAAU,KAAjB;AACD;AACD,WAAO,IAAP;AACD;AARY,CAAJ,CAAX;;AAWA,OAAO,GAAP,CAAW,OAAX,EAAoB,UAAC,GAAD,EAAM,GAAN,EAAc;;AAEhC,MAAI,CAAC,IAAI,IAAT,EAAe;AACb,WAAO,IAAI,UAAJ,CAAe,GAAf,CAAP;AACD;;AAED,MAAI,cAAc,IAAI,MAAJ,CAAW,GAAzB,CAAJ,EAAmC;AACjC,WAAO,cAAc,IAAI,MAAJ,CAAW,GAAzB,EAA8B,GAA9B,EAAmC,GAAnC,CAAP;AACD;;AAED,gBACG,GADH,CACO,IAAI,MAAJ,CAAW,GADlB,EAEG,KAFH,CAES;AAAA,WAAS,IAAI,UAAJ,CAAe,eAAe,MAAM,IAArB,CAAf,CAAT;AAAA,GAFT,EAGG,IAHH,CAGQ,kBAAU;AACd,QAAI,OAAO,KAAP,CAAa,KAAjB,EAAwB;AACtB,mBAAa,MAAb,EAAqB,GAArB,EAA0B,GAA1B;AACD,KAFD,MAEO;AACL,oBAAc,OAAd,CAAsB,iBAAtB,EAAyC,OAAO,GAAhD,EACG,IADH,CACQ;AAAA,eAAM,aAAa,MAAb,EAAqB,GAArB,EAA0B,GAA1B,CAAN;AAAA,OADR,EAEG,KAFH,CAES;AAAA,eAAS,IAAI,UAAJ,CAAe,eAAe,MAAM,IAArB,CAAf,CAAT;AAAA,OAFT;AAGD;AACF,GAXH;AAaD,CAvBD;;AAyBA,OAAO,OAAP,GAAiB,MAAjB","file":"streaming.js","sourcesContent":["'use strict';\n\nlet router = require('express').Router(),\n  MjpegProxy = require('mjpeg-proxy').MjpegProxy,\n  jwt = require('express-jwt'),\n  logService = require('../services/log-service'),\n  config = require('../config'),\n  cameraService = require('../services/components/camera-service');\n\n// TODO - improve\nfunction getErrorStatus (errorCode) {\n  let errorStatusMap = {\n    'NOTFOUND': 404,\n    'BADREQUEST': 400\n  };\n\n  logService.debug('API error', errorCode);\n\n  return errorStatusMap[errorCode] || 500;\n}\n\nlet mjpegProxyMap = {};\nfunction proxyRequest(camera, req, res) {\n  mjpegProxyMap[camera.key] = new MjpegProxy(camera.state.url).proxyRequest;\n  mjpegProxyMap[camera.key](req, res);\n}\n\nrouter.use(jwt({\n  secret: config.configuration.auth.secret,\n  credentialsRequired: false,\n  getToken: function tokenFromQueryString (req) {\n    if (req.query && req.query.token) {\n      return req.query.token;\n    }\n    return null;\n  }\n}));\n\nrouter.get('/:key', (req, res) => {\n\n  if (!req.user) {\n    return res.sendStatus(401);\n  }\n\n  if (mjpegProxyMap[req.params.key]) {\n    return mjpegProxyMap[req.params.key](req, res);\n  }\n\n  cameraService\n    .get(req.params.key)\n    .catch(error => res.sendStatus(getErrorStatus(error.code)))\n    .then(camera => {\n      if (camera.state.value) {\n        proxyRequest(camera, req, res);\n      } else {\n        cameraService.actions['start-streaming'](camera.key)\n          .then(() => proxyRequest(camera, req, res))\n          .catch(error => res.sendStatus(getErrorStatus(error.code)));\n      }\n    });\n\n});\n\nmodule.exports = router;"]}