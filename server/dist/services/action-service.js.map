{"version":3,"sources":["../../src/services/action-service.js"],"names":[],"mappings":"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","file":"action-service.js","sourcesContent":["'use strict';\n\nlet actions = {},\n  actionRepository = require('../data-access/action-repository'),\n  componentService = require('./component-service'),\n  logService = require('./log-service');\n\nfunction load () {\n  return new Promise((resolve, reject) => {\n    actionRepository.getAll().then(actions => {\n      let promises = [];\n      for (let action of actions) {\n        promises.push(loadAction(action));\n      }\n      Promise.all(promises)\n        .then(resolve)\n        .catch(reject);\n    }).catch(reject);\n  });\n}\n\nfunction loadAction (config) {\n  if (actions[config.key]) {\n    let errorMessage = 'Action key already exists: ' + config.key;\n    logService.error(errorMessage);\n    return Promise.reject({\n      code: 'BADREQUEST',\n      message: errorMessage\n    });\n  }\n\n  actions[config.key] = {\n    name: config.name,\n    key: config.key,\n    execute: () => {\n      logService.info('Executing action: ' + config.key);\n      let promises = config.componentActions.map(componentAction => {\n        return componentService.action(componentAction.componentKey, componentAction.actionKey, componentAction.actionOptions);\n      });\n\n      return Promise.all(promises);\n    }\n  };\n  return get(config.key);\n}\n\nfunction execute (key) {\n  return new Promise((resolve, reject) => {\n    get(key).then(action => {\n      action.execute()\n        .then(resolve)\n        .catch(reject);\n    });\n  });\n}\n\nfunction getAll (isDto) {\n  let keys = Object.keys(actions);\n\n  let getPromises = keys.map((key) => {\n    return get(key, isDto);\n  });\n\n  return Promise.all(getPromises);\n}\n\nfunction get (key, isDto) {\n  if (!actions[key]) {\n    let errorMessage = 'Action key do not exists: ' + key;\n    logService.error(errorMessage);\n    return Promise.reject({\n      code: 'NOTFOUND',\n      message: errorMessage\n    });\n  }\n\n  if (!isDto) {\n    return Promise.resolve(actions[key]);\n  }\n\n  return Promise.resolve({\n    name: actions[key].name,\n    key: actions[key].key\n  });\n}\n\nmodule.exports = {\n  load: load,\n  get: get,\n  getAll: getAll,\n  execute: execute\n};"]}