{"version":3,"sources":["../../src/services/authentication-service.js"],"names":[],"mappings":"AAAA;;AAEA,IAAM,SAAS,QAAQ,QAAR,CAAf;AAAA,IACE,MAAM,QAAQ,cAAR,CADR;;AAGA,IAAI,iBAAiB,QAAQ,gCAAR,CAArB;AAAA,IACE,SAAS,QAAQ,WAAR,CADX;AAAA,IAEE,aAAa,QAAQ,eAAR,CAFf;;;;;;;;;AAWA,SAAS,gBAAT,CAA0B,aAA1B,EAAyC,YAAzC,EAAuD;AACrD,SAAO,iBAAiB,QAAQ,aAAR,CAAxB;AACD;;;;;;;;AAQD,SAAS,OAAT,CAAiB,QAAjB,EAA2B;AACzB,MAAI;AACF,WAAO,OAAO,UAAP,CAAkB,QAAlB,EAA4B,OAAO,aAAP,CAAqB,IAArB,CAA0B,IAAtD,EACJ,MADI,CACG,QADH,EACa,MADb,EAEJ,MAFI,CAEG,KAFH,CAAP;AAGD,GAJD,CAIE,OAAO,GAAP,EAAY;AACZ,eAAW,KAAX,CAAiB,2BAAjB,EAA8C,GAA9C;AACA,WAAO,KAAP;AACD;AACF;;;;;;;;;AASD,SAAS,KAAT,CAAe,QAAf,EAAyB,QAAzB,EAAmC;;AAEjC,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,mBAAe,GAAf,CAAmB;AACjB,gBAAU,SAAS,WAAT;AADO,KAAnB,EAEG,IAFH,CAEQ,gBAAQ;AACd,aAAO,KAAK,MAAL,GAAc,CAAd,GAAkB,KAAK,CAAL,CAAlB,GAA4B,IAAnC;AACA,UAAI,CAAC,IAAD,IAAS,CAAC,iBAAiB,QAAjB,EAA2B,KAAK,QAAhC,CAAd,EAAyD;AACvD,eAAO,OAAO,EAAE,MAAM,YAAR,EAAP,CAAP;AACD;AACD,cAAQ;AACN,eAAO,SAAS,IAAT,CADD;AAEN,cAAM;AACJ,oBAAU,KAAK;AADX;AAFA,OAAR;AAMD,KAbD,EAaG,iBAAS;AACV,iBAAW,KAAX,CAAiB,KAAjB;AACA,aAAO,KAAP;AACD,KAhBD;AAiBD,GAlBM,CAAP;AAmBD;;;;;;;AAOD,SAAS,QAAT,CAAkB,IAAlB,EAAwB;AACtB,SAAO,IAAI,IAAJ,CAAS;AACd,cAAU,KAAK,QADD;AAEd,QAAI,KAAK;AAFK,GAAT,EAGJ,OAAO,aAAP,CAAqB,IAArB,CAA0B,MAHtB,CAAP;AAID;;;;;;;AAOD,SAAS,IAAT,GAAiB;AACf,aAAW,KAAX,CAAiB,wBAAjB;AACA,MAAI,WAAW,QAAQ,IAAR,CACZ,KADY,CACN,CADM,EAEZ,MAFY,CAEL,oBAAY;AAClB,WAAO,aAAa,aAApB;AACD,GAJY,EAIV,CAJU,CAAf;;AAMA,MAAI,CAAC,QAAL,EAAe;AACb,WAAO,QAAQ,OAAR,EAAP;AACD;;AAED,aAAW,KAAX,CAAiB,gBAAjB;AACA,SAAO,eACJ,MADI,GAEJ,IAFI,CAEC,iBAAS;AACb,QAAI,CAAC,MAAM,MAAX,EAAmB;AACjB,aAAO,eAAe,GAAf,CAAmB;AACxB,kBAAW,OADa;AAExB,kBAAW,QAAQ,OAAR;AAFa,OAAnB,EAGJ,IAHI,CAGC;AAAA,eAAM,WAAW,IAAX,CAAgB,kBAAhB,CAAN;AAAA,OAHD,EAIJ,KAJI,CAIE,eAAO;AACZ,mBAAW,KAAX,CAAiB,yBAAjB,EAA4C,GAA5C;AACA,cAAM,GAAN;AACD,OAPI,CAAP;AAQD;AACF,GAbI,EAcJ,KAdI,CAcE,eAAO;AACZ,eAAW,KAAX,CAAiB,yBAAjB,EAA4C,GAA5C;AACA,UAAM,GAAN;AACD,GAjBI,CAAP;AAkBD;;AAED,OAAO,OAAP,GAAiB;AACf,SAAO,KADQ;AAEf,QAAM;AAFS,CAAjB","file":"authentication-service.js","sourcesContent":["'use strict';\n\nconst crypto = require('crypto'),\n  jwt = require('jsonwebtoken');\n\nlet userRepository = require('../data-access/user-repository'),\n  config = require('../config'),\n  logService = require('./log-service');\n\n/**\n * validatePassword\n * @description checks the given password against the one in the storage\n * @param givenPassword\n * @param userPassword\n * @returns {boolean}\n */\nfunction validatePassword(givenPassword, userPassword) {\n  return userPassword === getHash(givenPassword);\n}\n\n/**\n * getHash\n * @description returns a hash of a given password or false if it cannot create the hash\n * @param password\n * @returns {string|boolean}\n */\nfunction getHash(password) {\n  try {\n    return crypto.createHmac('sha256', config.configuration.auth.salt)\n      .update(password, 'utf8')\n      .digest('hex');\n  } catch (err) {\n    logService.error('Error validating password', err);\n    return false;\n  }\n}\n\n/**\n * login\n * @description Evaluates the given credentials and returns a proper token\n * in the case the user is valid.\n * @params user: the user credentials\n * @returns {Promise}\n */\nfunction login(username, password) {\n\n  return new Promise((resolve, reject) => {\n    userRepository.get({\n      username: username.toLowerCase()\n    }).then(user => {\n      user = user.length > 0 ? user[0] : null;\n      if (!user || !validatePassword(password, user.password)) {\n        return reject({ code: 'BADREQUEST' });\n      }\n      resolve({\n        token: getToken(user),\n        user: {\n          username: user.username\n        }\n      });\n    }, error => {\n      logService.error(error);\n      reject(error);\n    });\n  });\n}\n\n/**\n * getToken\n * @description Get a new signed token from JWT for the given user.\n * @param user\n */\nfunction getToken(user) {\n  return jwt.sign({\n    username: user.username,\n    id: user._id\n  }, config.configuration.auth.secret);\n}\n\n/**\n * load\n * @description Checks the --add-admin argument and adds the admin if there are no users in the storage.\n * @returns {Promise}\n */\nfunction load () {\n  logService.debug('Loading authentication');\n  let addAdmin = process.argv\n    .slice(2)\n    .filter(argument => {\n      return argument === '--add-admin';\n    })[0];\n\n  if (!addAdmin) {\n    return Promise.resolve();\n  }\n\n  logService.debug('Add admin flag');\n  return userRepository\n    .getAll()\n    .then(users => {\n      if (!users.length) {\n        return userRepository.add({\n          username : 'admin',\n          password : getHash('admin')\n        }).then(() => logService.info('Admin user added'))\n          .catch(err => {\n            logService.error('Error adding admin user', err);\n            throw err;\n          });\n      }\n    })\n    .catch(err => {\n      logService.error('Error getting all users', err);\n      throw err;\n    });\n}\n\nmodule.exports = {\n  login: login,\n  load: load\n};"]}