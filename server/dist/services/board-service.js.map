{"version":3,"sources":["../../src/services/board-service.js"],"names":[],"mappings":"AAAA;;;;AAEA,IAAI,OAAO,QAAQ,aAAR,CAAX;AAAA,IACE,kBAAkB,QAAQ,iCAAR,CADpB;AAAA,IAEE,aAAa,QAAQ,eAAR,CAFf;;AAIA,IAAI,QAAQ;AACV,aAAW,KAAK;AADN,CAAZ;;AAIA,SAAS,IAAT,GAAiB;AACf,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,eAAW,KAAX,CAAiB,gBAAjB;;AAEA,oBAAgB,MAAhB,GACG,IADH,CACQ,UAAU,MAAV,EAAkB;AACtB,UAAI,CAAC,MAAD,IAAW,OAAO,MAAP,KAAkB,CAAjC,EAAoC;AAClC,YAAI,eAAe,0CAA0C,KAAK,SAAL,CAAe,MAAf,CAA7D;AACA,mBAAW,KAAX,CAAiB,YAAjB;AACA,eAAO,YAAP;AACD;;AAED,UAAI,SAAS,OAAO,MAApB;AAPsB;AAAA;AAAA;;AAAA;AAAA;AAAA,cAQb,WARa;;AASpB,cAAI,OAAO,MAAM,YAAY,IAAlB,CAAX;AACA,cAAI,CAAC,IAAL,EAAW;AACT,gBAAI,gBAAe,2BAA2B,YAAY,IAA1D;AACA,uBAAW,KAAX,CAAiB,aAAjB;AACA,mBAAO,aAAP;AACA;AAAA;AAAA;AACD;;AAED,cAAI,QAAQ,IAAI,IAAJ,CAAS,YAAY,MAAZ,IAAsB,SAA/B,CAAZ;AACA,gBAAM,EAAN,CAAS,OAAT,EAAkB,YAAM;AACtB,uBAAW,KAAX,CAAiB,mBAAmB,YAAY,GAAhD;;AAEA;AACA,gBAAI,WAAW,CAAf,EAAkB;AAChB;AACD;AACF,WAPD;AAlBoB;;AAQtB,6BAAwB,MAAxB,8HAAgC;AAAA;;AAAA;AAkB/B;AA1BqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BvB,KA5BH,EA4BK,KA5BL,CA4BW,MA5BX;AA8BD,GAjCM,CAAP;AAkCD;;AAED,OAAO,OAAP,GAAiB;AACf,QAAM;AADS,CAAjB","file":"board-service.js","sourcesContent":["'use strict';\n\nlet five = require('johnny-five'),\n  boardRepository = require('../data-access/board-repository'),\n  logService = require('./log-service');\n\nlet types = {\n  'arduino': five.Board\n};\n\nfunction load () {\n  return new Promise((resolve, reject) => {\n    logService.debug('Loading boards');\n\n    boardRepository.getAll()\n      .then(function (boards) {\n        if (!boards || boards.length === 0) {\n          let errorMessage = 'Trying to load empty boards element: ' + JSON.stringify(boards);\n          logService.error(errorMessage);\n          reject(errorMessage);\n        }\n\n        let toLoad = boards.length;\n        for (let boardConfig of boards) {\n          let type = types[boardConfig.type];\n          if (!type) {\n            let errorMessage = 'Board type not found: ' + boardConfig.type;\n            logService.error(errorMessage);\n            reject(errorMessage);\n            return;\n          }\n\n          let board = new type(boardConfig.config || undefined);\n          board.on('ready', () => {\n            logService.debug('Board loaded: ' + boardConfig.key);\n\n            toLoad--;\n            if (toLoad === 0) {\n              resolve();\n            }\n          });\n        }\n      }).catch(reject);\n\n  });\n}\n\nmodule.exports = {\n  load: load\n};"]}