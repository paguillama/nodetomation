{"version":3,"sources":["../../src/services/component-service.js"],"names":[],"mappings":"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","file":"component-service.js","sourcesContent":["'use strict';\n\nlet logService = require('./log-service'),\n  eventEmitter = require('../event-emitter'),\n  componentRepository = require('../data-access/component-repository'),\n  liveCommunicationService = require('./live-communication-service');\n\nlet servicesMap = {\n  fan: require('./components/fan-service'),\n  light: require('./components/light-service'),\n  irrigator: require('./components/irrigator-service'),\n  camera: require('./components/camera-service'),\n  thermometer: require('./components/thermometer-service')\n};\n\nlet componentsKeyServiceMap = {},\n  componentKeys = [];\n\nfunction get (key) {\n  let typeKey = componentsKeyServiceMap[key];\n  if (!typeKey) {\n    let errorMessage = 'Component key not found: ' + key;\n    logService.error(errorMessage);\n    return Promise.reject({\n      code: 'NOTFOUND',\n      message: errorMessage\n    });\n  }\n\n  return servicesMap[typeKey].get(key);\n}\n\nfunction getAll () {\n  let promises = componentKeys.map(componentKey => {\n    return servicesMap[componentsKeyServiceMap[componentKey]].get(componentKey);\n  });\n\n  return Promise.all(promises);\n}\n\nfunction load () {\n  return new Promise((resolve, reject) => {\n    componentRepository.getAll()\n      .then(components => {\n        let promises = components.map(component => {\n          return loadComponent(component);\n        });\n        Promise.all(promises)\n          .then(componentData => {\n            emitComponentChange();\n\n            resolve(componentData);\n          })\n          .catch(reject);\n\n      }).catch(reject);\n  });\n}\n\nfunction loadComponent (setup) {\n  logService.debug('Loading ' + setup.key);\n  let service = servicesMap[setup.typeKey];\n  if (!service) {\n    return Promise.reject('Component type key not found: ' + setup.typeKey);\n  }\n\n  return service.load(setup).then(data => {\n    componentsKeyServiceMap[setup.key] = setup.typeKey;\n    componentKeys.push(setup.key);\n    return data;\n  });\n}\n\nfunction action (componentKey, actionKey, actionOptions) {\n  let typeKey = componentsKeyServiceMap[componentKey];\n  if (!typeKey) {\n    let errorMessage = 'Component key not found: ' + componentKey;\n    logService.error(errorMessage);\n    return Promise.reject({\n      code: 'NOTFOUND',\n      message: errorMessage\n    });\n  }\n  if (!servicesMap[typeKey].actions[actionKey]) {\n    let errorMessage = 'Action key ' + actionKey + ' not found for component key ' + componentKey;\n    logService.error(errorMessage);\n    return Promise.reject({\n      code: 'NOTFOUND',\n      message: errorMessage\n    });\n  }\n\n  return servicesMap[typeKey].actions[actionKey](componentKey, actionOptions);\n}\n\nfunction event (componentKey, eventKey, config) {\n  let typeKey = componentsKeyServiceMap[componentKey];\n  if (!typeKey) {\n    let errorMessage = 'Component key not found: ' + componentKey;\n    logService.error(errorMessage);\n    return Promise.reject({\n      code: 'NOTFOUND',\n      message: errorMessage\n    });\n  }\n  if (!servicesMap[typeKey].events[eventKey]) {\n    let errorMessage = 'Event key ' + eventKey + ' not found for component key ' + componentKey;\n    logService.error(errorMessage);\n    return Promise.reject({\n      code: 'NOTFOUND',\n      message: errorMessage\n    });\n  }\n\n  return servicesMap[typeKey].events[eventKey](componentKey, config);\n}\n\nfunction init () {\n  eventEmitter.on('component-state-changed', emitComponentChange);\n}\n\nfunction emitComponentChange () {\n  getAll().then(componentsData => {\n    liveCommunicationService.broadcast('nodeto-components', componentsData);\n  });\n}\n\ninit();\n\nmodule.exports = {\n  get: get,\n  getAll: getAll,\n  load: load,\n  action: action,\n  event: event\n};"]}