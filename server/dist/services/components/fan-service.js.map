{"version":3,"sources":["../../../src/services/components/fan-service.js"],"names":[],"mappings":"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","file":"fan-service.js","sourcesContent":["'use strict';\n\nlet Fan = require('./../../hardware/components/fan'),\n  logService = require('./../log-service');\n\nlet components = {};\n\nfunction load (setup) {\n  if(Object.prototype.toString.call(setup) === '[object Array]' ) {\n    let promises = [];\n    for (let setupItem of setup) {\n      promises.push(loadItem(setupItem));\n    }\n    return Promise.all(promises);\n  } else {\n    return loadItem(setup);\n  }\n}\n\nfunction loadItem (setup) {\n  if (components[setup.key]) {\n    let errorMessage = 'Fan key already exists: ' + setup.key;\n    logService.error(errorMessage);\n    return Promise.reject({\n      code: 'BADREQUEST',\n      message: errorMessage\n    });\n  }\n\n  logService.debug('Fan loaded: ' + setup.key);\n  components[setup.key] = {\n    key: setup.key,\n    name: setup.name,\n    hardwareComponent: new Fan(setup),\n    coordinates: setup.coordinates\n  };\n  return get(setup.key);\n}\n\nfunction turnOn (key) {\n  let component = components[key].hardwareComponent;\n  if (!component) {\n    let errorMessage = 'Fan not found: ' + key;\n    logService.error(errorMessage);\n    return Promise.reject({\n      code: 'NOTFOUND',\n      message: errorMessage\n    });\n  }\n\n  return component.on();\n}\n\nfunction turnOff (key) {\n  let component = components[key].hardwareComponent;\n  if (!component) {\n    let errorMessage = 'Fan not found: ' + key;\n    logService.error(errorMessage);\n    return Promise.reject({\n      code: 'NOTFOUND',\n      message: errorMessage\n    });\n  }\n\n  return component.off();\n}\n\nfunction get (key) {\n  let component = components[key];\n  if (!component) {\n    let errorMessage = 'Fan not found: ' + key;\n    logService.error(errorMessage);\n    return Promise.reject({\n      code: 'NOTFOUND',\n      message: errorMessage\n    });\n  }\n\n  let defaultAction = component.hardwareComponent.state.value ? 'turn-off' : 'turn-on';\n  return Promise.resolve({\n    name: component.hardwareComponent.name,\n    key: component.key,\n    typeKey: 'fan',\n    state: component.hardwareComponent.state,\n    coordinates: component.coordinates,\n    defaultAction: defaultAction,\n    actions: [\n      defaultAction\n    ]\n  });\n}\n\nmodule.exports = {\n  get: get,\n  load: load,\n  actions: {\n    'turn-on': turnOn,\n    'turn-off': turnOff\n  },\n  events: {}\n};"]}