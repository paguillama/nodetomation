{"version":3,"sources":["../../../src/services/components/thermometer-service.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,cAAc,QAAQ,yCAAR,CAAlB;AAAA,IACE,aAAa,QAAQ,kBAAR,CADf;AAAA,IAEE,SAAS,QAAQ,cAAR,CAFX;;AAIA,IAAI,aAAa,EAAjB;;AAEA,SAAS,IAAT,CAAe,KAAf,EAAsB;AACpB,MAAG,OAAO,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,KAA/B,MAA0C,gBAA7C,EAAgE;AAC9D,QAAI,WAAW,EAAf;AAD8D;AAAA;AAAA;;AAAA;AAE9D,2BAAsB,KAAtB,8HAA6B;AAAA,YAApB,SAAoB;;AAC3B,iBAAS,IAAT,CAAc,SAAS,SAAT,CAAd;AACD;AAJ6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAK9D,WAAO,QAAQ,GAAR,CAAY,QAAZ,CAAP;AACD,GAND,MAMO;AACL,WAAO,SAAS,KAAT,CAAP;AACD;AACF;;AAED,SAAS,QAAT,CAAmB,KAAnB,EAA0B;AACxB,MAAI,WAAW,MAAM,GAAjB,CAAJ,EAA2B;AACzB,QAAI,eAAe,qCAAqC,MAAM,GAA9D;AACA,eAAW,KAAX,CAAiB,YAAjB;AACA,WAAO,QAAQ,MAAR,CAAe;AACpB,YAAM,YADc;AAEpB,eAAS;AAFW,KAAf,CAAP;AAID;;AAED,QAAM,IAAN,GAAa,OAAO,aAAP,CAAqB,QAArB,CAA8B,KAA9B,CAAoC,WAAjD;;AAEA,aAAW,MAAM,GAAjB,IAAwB;AACtB,SAAK,MAAM,GADW;AAEtB,UAAM,MAAM,IAFU;AAGtB,uBAAmB,IAAI,WAAJ,CAAgB,KAAhB,CAHG;AAItB,iBAAa,MAAM;AAJG,GAAxB;AAMA,aAAW,KAAX,CAAiB,yBAAyB,MAAM,GAAhD;AACA,SAAO,IAAI,MAAM,GAAV,CAAP;AACD;;AAED,SAAS,mBAAT,CAA8B,GAA9B,EAAmC,MAAnC,EAA2C;;;AAGzC,MAAI,YAAY,WAAW,GAAX,CAAhB;AACA,MAAI,SAAJ,EAAe;AAAA;AACb,UAAI,gBAAgB,IAApB;;AAEA,gBAAU,iBAAV,CAA4B,QAA5B,CAAqC,iBAAS;AAC5C,YAAI,iBAAiB,OAAO,KAAP,IAAgB,MAAM,KAA3C,EAAkD;AAChD,iBAAO,OAAP;AACA,0BAAgB,KAAhB;AACD;;AAED,YAAI,OAAO,iBAAP,GAA2B,MAAM,KAAjC,IAA0C,CAAC,aAA/C,EAA8D;AAC5D,0BAAgB,IAAhB;AACD;AACF,OATD;AAHa;AAad,G;AACF;;AAED,SAAS,mBAAT,CAA8B,GAA9B,EAAmC,MAAnC,EAA2C;;;AAGzC,MAAI,YAAY,WAAW,GAAX,CAAhB;AACA,MAAI,SAAJ,EAAe;AAAA;AACb,UAAI,gBAAgB,IAApB;;AAEA,gBAAU,iBAAV,CAA4B,QAA5B,CAAqC,iBAAS;AAC5C,YAAI,iBAAiB,OAAO,KAAP,IAAgB,MAAM,KAA3C,EAAkD;AAChD,iBAAO,OAAP;AACA,0BAAgB,KAAhB;AACD;;AAED,YAAI,OAAO,iBAAP,GAA2B,MAAM,KAAjC,IAA0C,CAAC,aAA/C,EAA8D;AAC5D,0BAAgB,IAAhB;AACD;AACF,OATD;AAHa;AAad,G;AACF;;AAED,SAAS,GAAT,CAAc,GAAd,EAAmB;AACjB,MAAI,YAAY,WAAW,GAAX,CAAhB;AACA,MAAI,CAAC,SAAL,EAAgB;AACd,QAAI,eAAe,4BAA4B,GAA/C;AACA,eAAW,KAAX,CAAiB,YAAjB;AACA,WAAO,QAAQ,MAAR,CAAe;AACpB,YAAM,UADc;AAEpB,eAAS;AAFW,KAAf,CAAP;AAID;;AAED,SAAO,QAAQ,OAAR,CAAgB;AACrB,UAAM,UAAU,IADK;AAErB,SAAK,UAAU,GAFM;AAGrB,aAAS,aAHY;AAIrB,WAAO,UAAU,iBAAV,CAA4B,KAJd;AAKrB,iBAAa,UAAU,WALF;AAMrB,aAAS;AANY,GAAhB,CAAP;AAQD;;AAED,OAAO,OAAP,GAAiB;AACf,OAAK,GADU;AAEf,QAAM,IAFS;AAGf,WAAS,EAHM;AAIf,UAAQ;AACN,6BAAyB,mBADnB;AAEN,6BAAyB;AAFnB;AAJO,CAAjB","file":"thermometer-service.js","sourcesContent":["'use strict';\n\nlet Thermometer = require('./../../hardware/components/thermometer'),\n  logService = require('./../log-service'),\n  config = require('../../config');\n\nlet components = {};\n\nfunction load (setup) {\n  if(Object.prototype.toString.call(setup) === '[object Array]' ) {\n    let promises = [];\n    for (let setupItem of setup) {\n      promises.push(loadItem(setupItem));\n    }\n    return Promise.all(promises);\n  } else {\n    return loadItem(setup);\n  }\n}\n\nfunction loadItem (setup) {\n  if (components[setup.key]) {\n    let errorMessage = 'Thermometer key already exists: ' + setup.key;\n    logService.error(errorMessage);\n    return Promise.reject({\n      code: 'BADREQUEST',\n      message: errorMessage\n    });\n  }\n\n  setup.unit = config.configuration.regional.units.temperature;\n\n  components[setup.key] = {\n    key: setup.key,\n    name: setup.name,\n    hardwareComponent: new Thermometer(setup),\n    coordinates: setup.coordinates\n  };\n  logService.debug('Thermometer loaded: ' + setup.key);\n  return get(setup.key);\n}\n\nfunction temperatureMoreThan (key, config) {\n  // TODO - maybe promise-based?\n\n  let component = components[key];\n  if (component) {\n    let shouldTrigger = true;\n\n    component.hardwareComponent.onChange(state => {\n      if (shouldTrigger && config.value <= state.value) {\n        config.execute();\n        shouldTrigger = false;\n      }\n\n      if (config.triggerAfterBelow > state.value && !shouldTrigger) {\n        shouldTrigger = true;\n      }\n    });\n  } // TODO - else\n}\n\nfunction temperatureLessThan (key, config) {\n  // TODO - maybe promise-based?\n\n  let component = components[key];\n  if (component) {\n    let shouldTrigger = true;\n\n    component.hardwareComponent.onChange(state => {\n      if (shouldTrigger && config.value >= state.value) {\n        config.execute();\n        shouldTrigger = false;\n      }\n\n      if (config.triggerAfterAbove < state.value && !shouldTrigger) {\n        shouldTrigger = true;\n      }\n    });\n  } // TODO - else\n}\n\nfunction get (key) {\n  let component = components[key];\n  if (!component) {\n    let errorMessage = 'Thermometer not found: ' + key;\n    logService.error(errorMessage);\n    return Promise.reject({\n      code: 'NOTFOUND',\n      message: errorMessage\n    });\n  }\n\n  return Promise.resolve({\n    name: component.name,\n    key: component.key,\n    typeKey: 'thermometer',\n    state: component.hardwareComponent.state,\n    coordinates: component.coordinates,\n    actions: []\n  });\n}\n\nmodule.exports = {\n  get: get,\n  load: load,\n  actions: {},\n  events: {\n    'temperature-more-than': temperatureMoreThan,\n    'temperature-less-than': temperatureLessThan\n  }\n};"]}