{"version":3,"sources":["../../src/services/event-service.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,SAAS,EAAb;AAAA,IACE,kBAAkB,QAAQ,iCAAR,CADpB;AAAA,IAEE,gBAAgB,QAAQ,kBAAR,CAFlB;AAAA,IAGE,mBAAmB,QAAQ,qBAAR,CAHrB;AAAA,IAIE,aAAa,QAAQ,eAAR,CAJf;;AAMA,SAAS,IAAT,GAAiB;AACf,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,oBAAgB,MAAhB,GAAyB,IAAzB,CAA8B,kBAAU;AACtC,UAAI,WAAW,OAAO,GAAP,CAAW,iBAAS;AACjC,eAAO,UAAU,KAAV,CAAP;AACD,OAFc,CAAf;AAGA,cAAQ,GAAR,CAAY,QAAZ,EACG,IADH,CACQ,OADR,EAEG,KAFH,CAES,MAFT;AAGD,KAPD,EAOG,KAPH,CAOS,MAPT;AAQD,GATM,CAAP;AAUD;;AAED,SAAS,SAAT,CAAoB,MAApB,EAA4B;AAC1B,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,QAAI,OAAO,OAAO,GAAd,CAAJ,EAAwB;AACtB,UAAI,eAAe,+BAA+B,OAAO,GAAzD;AACA,iBAAW,KAAX,CAAiB,YAAjB;AACA,aAAO,OAAO;AACZ,cAAM,YADM;AAEZ,iBAAS;AAFG,OAAP,CAAP;AAID;;AAED,WAAO,OAAO,GAAd,IAAqB;AACnB,YAAM,OAAO,IADM;AAEnB,WAAK,OAAO,GAFO;AAGnB,cAAQ;AAHW,KAArB;;AAMA,WAAO,eAAP,CAAuB,OAAvB,CAA+B,0BAAkB;AAC/C,qBAAe,WAAf,CAA2B,OAA3B,GAAqC,YAAM;AACzC,YAAI,WAAW,OAAO,OAAP,CAAe,GAAf,CAAmB,kBAAU;AAC1C,iBAAO,cAAc,OAAd,CAAsB,OAAO,SAA7B,CAAP;AACD,SAFc,CAAf;;AAIA,eAAO,QAAQ,GAAR,CAAY,QAAZ,CAAP;AACD,OAND;;AAQA,uBAAiB,KAAjB,CAAuB,eAAe,YAAtC,EAAoD,eAAe,QAAnE,EAA6E,eAAe,WAA5F;AACD,KAVD;;AAYA,WAAO,IAAI,OAAO,GAAX,CAAP;AACD,GA7BM,CAAP;AA8BD;;AAED,SAAS,MAAT,CAAiB,KAAjB,EAAwB;AACtB,MAAI,OAAO,OAAO,IAAP,CAAY,MAAZ,CAAX;;AAEA,MAAI,cAAc,KAAK,GAAL,CAAS,UAAC,GAAD,EAAS;AAClC,WAAO,IAAI,GAAJ,EAAS,KAAT,CAAP;AACD,GAFiB,CAAlB;;AAIA,SAAO,QAAQ,GAAR,CAAY,WAAZ,CAAP;AACD;;AAED,SAAS,GAAT,CAAc,GAAd,EAAmB,KAAnB,EAA0B;AACxB,MAAI,CAAC,OAAO,GAAP,CAAL,EAAkB;AAChB,QAAI,eAAe,8BAA8B,GAAjD;AACA,eAAW,KAAX,CAAiB,YAAjB;AACA,WAAO,QAAQ,MAAR,CAAe;AACpB,YAAM,UADc;AAEpB,eAAS;AAFW,KAAf,CAAP;AAID;;AAED,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,QAAQ,OAAR,CAAgB,OAAO,GAAP,CAAhB,CAAP;AACD;;AAED,SAAO,QAAQ,OAAR,CAAgB;AACrB,UAAM,OAAO,GAAP,EAAY,IADG;AAErB,SAAK,OAAO,GAAP,EAAY;AAFI,GAAhB,CAAP;AAID;;AAED,OAAO,OAAP,GAAiB;AACf,QAAM,IADS;AAEf,OAAK,GAFU;AAGf,UAAQ;AAHO,CAAjB","file":"event-service.js","sourcesContent":["'use strict';\n\nlet events = {},\n  eventRepository = require('../data-access/event-repository'),\n  actionService = require('./action-service'),\n  componentService = require('./component-service'),\n  logService = require('./log-service');\n\nfunction load () {\n  return new Promise((resolve, reject) => {\n    eventRepository.getAll().then(events => {\n      let promises = events.map(event => {\n        return loadEvent(event);\n      });\n      Promise.all(promises)\n        .then(resolve)\n        .catch(reject);\n    }).catch(reject);\n  });\n}\n\nfunction loadEvent (config) {\n  return new Promise((resolve, reject) => {\n    if (events[config.key]) {\n      let errorMessage = 'Event key already exists: ' + config.key;\n      logService.error(errorMessage);\n      return reject({\n        code: 'BADREQUEST',\n        message: errorMessage\n      });\n    }\n\n    events[config.key] = {\n      name: config.name,\n      key: config.key,\n      config: config\n    };\n\n    config.componentEvents.forEach(componentEvent => {\n      componentEvent.eventConfig.execute = () => {\n        let promises = config.actions.map(action => {\n          return actionService.execute(action.actionKey);\n        });\n\n        return Promise.all(promises);\n      };\n\n      componentService.event(componentEvent.componentKey, componentEvent.eventKey, componentEvent.eventConfig);\n    });\n\n    return get(config.key);\n  });\n}\n\nfunction getAll (isDto) {\n  let keys = Object.keys(events);\n\n  let getPromises = keys.map((key) => {\n    return get(key, isDto);\n  });\n\n  return Promise.all(getPromises);\n}\n\nfunction get (key, isDto) {\n  if (!events[key]) {\n    let errorMessage = 'Event key do not exists: ' + key;\n    logService.error(errorMessage);\n    return Promise.reject({\n      code: 'NOTFOUND',\n      message: errorMessage\n    });\n  }\n\n  if (!isDto) {\n    return Promise.resolve(events[key]);\n  }\n\n  return Promise.resolve({\n    name: events[key].name,\n    key: events[key].key\n  });\n}\n\nmodule.exports = {\n  load: load,\n  get: get,\n  getAll: getAll\n};"]}