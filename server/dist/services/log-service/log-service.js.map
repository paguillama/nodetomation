{"version":3,"sources":["../../../src/services/log-service/log-service.js"],"names":[],"mappings":"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","file":"log-service.js","sourcesContent":["'use strict';\n\nlet winston = require('winston'),\n  moment = require('moment'),\n  extend = require('util')._extend,\n  transports = require('./transports'),\n  config = require('../../config');\n\nlet defaultWinstonFormat = 'YYYY-MM-DDTHH:mm:ss.SSSZ';\n\nlet winstonLogger = new winston.Logger();\n\nlet loggerTransports = [];\n\nmodule.exports = {\n  configure: configure,\n  log: log,\n  get: get,\n  getAll: getAll,\n  error: logFactory('error'),\n  warn: logFactory('warn'),\n  info: logFactory('info'),\n  verbose: logFactory('verbose'),\n  debug: logFactory('debug'),\n  silly: logFactory('silly')\n};\n\nfunction log (level, text, metadata) {\n  if (metadata) {\n    // TODO Removing stringify winston stores only the metadata on log\n    winstonLogger.log(level, text, JSON.stringify(metadata));\n  } else {\n    winstonLogger.log(level, text);\n  }\n}\n\nfunction logFactory (level) {\n  return function (text, metadata) {\n    log(level, text, metadata);\n  };\n}\n\nfunction configure (config) {\n  // TODO - use winstonLogger.configure or remove old\n  // transports before adding the new config ones\n  let transport;\n  config.transports.forEach(transportConfig => {\n    transportConfig = extend({}, transportConfig);\n    transport = transports[transportConfig.type];\n    if (transport) {\n      if (transportConfig.nodetoConfig && transportConfig.nodetoConfig.timestampFormat) {\n        transportConfig.winstonConfig.timestamp = () => moment().format(transportConfig.nodetoConfig.timestampFormat);\n      }\n\n      winstonLogger.add(transport.winstonTransport, transportConfig.winstonConfig);\n      if (transport.configure) {\n        transportConfig.logMethod = log;\n        transport.configure(transportConfig);\n      }\n      loggerTransports.push({\n        transport: transport,\n        config: transportConfig\n      });\n    }\n  });\n}\n\nfunction get (key) {\n  for(let loggerTransport of loggerTransports) {\n    if (loggerTransport.transport.get) {\n      return loggerTransport.transport\n        .get(key)\n        .then(logData => {\n          logData.logs = logData.logs\n            .reverse()\n            .map(logItem => {\n              if (logItem.timestamp) {\n                let format = loggerTransport.config.nodetoConfig && loggerTransport.config.nodetoConfig.timestampFormat || defaultWinstonFormat;\n                let momentDate = moment(logItem.timestamp, format, true);\n                logItem.timeLabel = momentDate.isValid() ? momentDate.format(config.configuration.regional.instantTimeFormat) : logItem.timestamp;\n              }\n              return logItem;\n            });\n          return logData;\n        });\n    }\n  }\n\n  return Promise.reject({\n    message: 'No logging source registered',\n    code: 'NOTFOUND'\n  });\n}\n\nfunction getAll () {\n  for(let loggerTransport of loggerTransports) {\n    if (loggerTransport.transport.getAll) {\n      return loggerTransport.transport.getAll();\n    }\n  }\n\n  return Promise.reject({\n    message: 'No logging source registered',\n    code: 'NOTFOUND'\n  });\n}"]}