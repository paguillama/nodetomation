{"version":3,"sources":["../../../../src/services/log-service/transports/rotate-file.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,KAAK,QAAQ,IAAR,CAAT;AAAA,IACE,OAAO,QAAQ,MAAR,CADT;AAAA,IAEE,SAAS,QAAQ,QAAR,CAFX;AAAA,IAGE,UAAU,QAAQ,MAAR,EAAgB,OAH5B;AAAA,IAIE,eAAe,QAAQ,iBAAR,CAJjB;AAAA,IAKE,aAAa,QAAQ,2BAAR,CALf;;AAOA,IAAI,eAAJ;AAAA,IACE,iBADF;;AAGA,OAAO,OAAP,GAAiB;AACf,oBAAkB,UADH;AAEf,aAAW,SAFI;AAGf,OAAK,GAHU;AAIf,UAAQ;AAJO,CAAjB;;AAOA,SAAS,eAAT,CAA0B,KAA1B,EAAiC,aAAjC,EAAgD,cAAhD,EAAgE;AAC9D,MAAI,sBAAsB,cAAc,MAAxC;AACA,MAAI,aAAa,kBAAkB,SAAS,QAAT,CAAkB,cAAlB,EAAkC,MAAlC,CAAnC;AACA,SAAO,MACJ,MADI,CACG,UAAC,SAAD,EAAY,QAAZ,EAAyB;AAC/B,QAAI,SAAS,UAAT,CAAoB,aAApB,CAAJ,EAAwC;AACtC,UAAI,aAAa,SAAS,KAAT,CAAe,mBAAf,CAAjB;AACA,UAAI,aAAa,OAAO,UAAP,EAAmB,OAAO,YAAP,CAAoB,aAAvC,EAAsD,IAAtD,CAAjB;;AAEA,UAAI,WAAW,OAAX,EAAJ,EAA0B;;AAExB,YAAI,CAAC,UAAD,IAAe,WAAW,OAAX,CAAmB,UAAnB,CAAnB,EAAmD;AACjD,oBAAU,IAAV,CAAe;AACb,sBAAU,QADG;AAEb,wBAAY,UAFC;AAGb,iBAAK;AAHQ,WAAf;AAKD;AACF;AAEF;;AAED,WAAO,SAAP;AACD,GApBI,EAoBF,EApBE,CAAP;AAqBD;;AAED,SAAS,MAAT,GAAmB;AACjB,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,QAAI,CAAC,MAAL,EAAa;AACX,aAAO,OAAO;AACZ,iBAAS,oCADG;AAEZ,cAAM;AAFM,OAAP,CAAP;AAID;;AAED,OAAG,OAAH,CAAW,KAAK,OAAL,CAAa,OAAO,aAAP,CAAqB,QAAlC,CAAX,EAAwD,UAAC,GAAD,EAAM,KAAN,EAAgB;AACtE,UAAI,GAAJ,EAAS;AACP,eAAO,OAAO,GAAP,CAAP;AACD;;AAED,UAAI,CAAC,KAAD,IAAU,CAAC,MAAM,MAArB,EAA6B;AAC3B,eAAO,QAAQ,EAAR,CAAP;AACD;;AAED,UAAI,gBAAgB,KAAK,QAAL,CAAc,OAAO,aAAP,CAAqB,QAAnC,CAApB;;AAEA,UAAI,WAAW,gBAAgB,KAAhB,EAAuB,aAAvB,EACZ,IADY,CACP,UAAC,CAAD,EAAI,CAAJ,EAAU;AACd,eAAO,EAAE,UAAF,CAAa,QAAb,CAAsB,EAAE,UAAxB,CAAP;AACD,OAHY,EAIZ,GAJY,CAIR,oBAAY;AACf,eAAO;AACL,eAAK,SAAS,GADT;AAEL,iBAAO,SAAS,UAAT,CAAoB,MAApB,CAA2B,aAAa,aAAb,CAA2B,QAA3B,CAAoC,UAA/D;AAFF,SAAP;AAID,OATY,CAAf;;AAWA,aAAO,QAAQ,QAAR,CAAP;AACD,KAvBD;AAyBD,GAjCM,CAAP;AAkCD;;AAED,SAAS,GAAT,CAAc,GAAd,EAAmB;AACjB,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,QAAI,CAAC,MAAL,EAAa;AACX,aAAO,OAAO;AACZ,iBAAS,oCADG;AAEZ,cAAM;AAFM,OAAP,CAAP;AAID;;AAED,QAAI,aAAa,OAAO,GAAP,EAAY,OAAO,YAAP,CAAoB,aAAhC,EAA+C,IAA/C,CAAjB;AACA,QAAI,CAAC,WAAW,OAAX,EAAL,EAA2B;AACzB,aAAO,OAAO;AACZ,iBAAS,kBADG;AAEZ,cAAM;AAFM,OAAP,CAAP;AAID;;AAED,OAAG,QAAH,CAAY,OAAO,aAAP,CAAqB,QAArB,GAAgC,GAA5C,EAAiD,MAAjD,EAAyD,UAAC,GAAD,EAAM,IAAN,EAAe;AACtE,UAAI,GAAJ,EAAS;AACP,eAAO,OAAO,GAAP,CAAP;AACD;AACD,cAAQ;AACN,aAAK,GADC;AAEN,eAAO,WAAW,MAAX,CAAkB,aAAa,aAAb,CAA2B,QAA3B,CAAoC,UAAtD,CAFD;AAGN,cAAM,KACH,KADG,CACG,OADH,EAEH,MAFG,CAEI;AAAA,iBAAQ,KAAK,IAAL,EAAR;AAAA,SAFJ,EAGH,GAHG,CAGC;AAAA,iBAAQ,KAAK,KAAL,CAAW,IAAX,CAAR;AAAA,SAHD;AAHA,OAAR;AAQD,KAZD;AAcD,GA9BM,CAAP;AA+BD;;AAED,SAAS,SAAT,CAAoB,aAApB,EAAmC;AACjC,WAAS,aAAT;AACA,MAAI,CAAC,QAAD,IAAa,aAAa,aAAb,CAA2B,OAA3B,CAAmC,gBAApD,EAAsE;AACpE,eAAW,IAAI,OAAJ,CAAY,aAAa,aAAb,CAA2B,OAA3B,CAAmC,gBAA/C,EAAiE,cAAjE,EAAiF,KAAjF,EAAX;AACD;AACF;;AAED,SAAS,cAAT,GAA2B;AACzB,MAAI,CAAC,MAAL,EAAa;AACX;AACD;;AAED,MAAI,UAAU,KAAK,OAAL,CAAa,OAAO,aAAP,CAAqB,QAAlC,CAAd;AACA,MAAI,MAAJ,EAAY,oCAAoC,aAAa,aAAb,CAA2B,OAA3B,CAAmC,cAAvE,GAAwF,OAApG;AACA,KAAG,OAAH,CAAW,OAAX,EAAoB,UAAC,GAAD,EAAM,KAAN,EAAgB;AAClC,QAAI,GAAJ,EAAS;AACP,UAAI,OAAJ,EAAa,oCAAoC,OAAjD,EAA0D,GAA1D;AACA;AACD;;AAED,QAAI,WAAW,KAAK,QAAL,CAAc,OAAO,aAAP,CAAqB,QAAnC,CAAf;AACA,QAAI,WAAW,gBAAgB,KAAhB,EAAuB,QAAvB,EAAiC,aAAa,aAAb,CAA2B,OAA3B,CAAmC,cAApE,CAAf;;AAEA,aACG,OADH,CACW;AAAA,aAAW,QAAQ,QAAR,GAAmB,UAAU,GAAV,GAAgB,QAAQ,QAAtD;AAAA,KADX;;AAGA,QAAI,SAAS,MAAb,EAAqB;AACnB,UAAI,MAAJ,EAAY,SAAS,MAAT,GAAkB,0BAA9B;;AAEA,UAAI,mBAAmB,SAAS,GAAT,CAAa,mBAAW;AAC7C,eAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,aAAG,MAAH,CAAU,QAAQ,QAAlB,EAA4B,eAAO;AACjC,gBAAI,GAAJ,EAAS;AACP,kBAAI,OAAJ,EAAa,6BAA6B,QAAQ,QAAlD,EAA4D,KAAK,SAAL,CAAe,GAAf,CAA5D;AACA,qBAAO,QAAP;AACD;AACD;AACD,WAND;AAOD,SARM,CAAP;AASD,OAVsB,CAAvB;;AAYA,cAAQ,GAAR,CAAY,gBAAZ,EACG,IADH,CACQ;AAAA,eAAM,IAAI,MAAJ,EAAY,gCAAZ,CAAN;AAAA,OADR;AAED,KAjBD,MAiBO;AACL,UAAI,MAAJ,EAAY,4BAAZ;AACD;AACF,GAhCD;AAiCD;;AAED,SAAS,GAAT,CAAc,KAAd,EAAqB,IAArB,EAA2B,QAA3B,EAAqC;AACnC,SAAO,UAAU,OAAO,SAAjB,IAA8B,OAAO,SAAP,CAAiB,KAAjB,EAAwB,IAAxB,EAA8B,QAA9B,CAArC;AACD","file":"rotate-file.js","sourcesContent":["'use strict';\n\nlet fs = require('fs'),\n  path = require('path'),\n  moment = require('moment'),\n  CronJob = require('cron').CronJob,\n  globalConfig = require('../../../config'),\n  rotateFile = require('winston-daily-rotate-file');\n\nlet config,\n  cronTask;\n\nmodule.exports = {\n  winstonTransport: rotateFile,\n  configure: configure,\n  get: get,\n  getAll: getAll\n};\n\nfunction getLogFilesData (files, filenameStart, expirationDays) {\n  let filenameStartLength = filenameStart.length;\n  let expiration = expirationDays && moment().subtract(expirationDays, 'days');\n  return files\n    .reduce((filesData, filename) => {\n      if (filename.startsWith(filenameStart)) {\n        let dateString = filename.slice(filenameStartLength);\n        let momentDate = moment(dateString, config.nodetoConfig.momentPattern, true);\n\n        if (momentDate.isValid()) {\n\n          if (!expiration || expiration.isAfter(momentDate)) {\n            filesData.push({\n              filename: filename,\n              momentDate: momentDate,\n              key: dateString\n            });\n          }\n        }\n\n      }\n\n      return filesData;\n    }, []);\n}\n\nfunction getAll () {\n  return new Promise((resolve, reject) => {\n    if (!config) {\n      return reject({\n        message: 'The logger was not configured yet.',\n        code: 'BADREQUEST'\n      });\n    }\n\n    fs.readdir(path.dirname(config.winstonConfig.filename), (err, files) => {\n      if (err) {\n        return reject(err);\n      }\n\n      if (!files || !files.length) {\n        return resolve([]);\n      }\n\n      let filenameStart = path.basename(config.winstonConfig.filename);\n\n      let toReturn = getLogFilesData(files, filenameStart)\n        .sort((a, b) => {\n          return a.momentDate.isBefore(b.momentDate);\n        })\n        .map(fileData => {\n          return {\n            key: fileData.key,\n            label: fileData.momentDate.format(globalConfig.configuration.regional.dateFormat)\n          };\n        });\n\n      return resolve(toReturn);\n    });\n\n  });\n}\n\nfunction get (key) {\n  return new Promise((resolve, reject) => {\n    if (!config) {\n      return reject({\n        message: 'The logger was not configured yet.',\n        code: 'BADREQUEST'\n      });\n    }\n\n    let momentDate = moment(key, config.nodetoConfig.momentPattern, true);\n    if (!momentDate.isValid()) {\n      return reject({\n        message: 'Invalid log key.',\n        code: 'BADREQUEST'\n      });\n    }\n\n    fs.readFile(config.winstonConfig.filename + key, 'utf8', (err, data) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve({\n        key: key,\n        label: momentDate.format(globalConfig.configuration.regional.dateFormat),\n        logs: data\n          .split(/\\r?\\n/)\n          .filter(line => line.trim())\n          .map(line => JSON.parse(line))\n      });\n    });\n\n  });\n}\n\nfunction configure (configuration) {\n  config = configuration;\n  if (!cronTask && globalConfig.configuration.logging.cleaningSchedule) {\n    cronTask = new CronJob(globalConfig.configuration.logging.cleaningSchedule, deleteOldFiles).start();\n  }\n}\n\nfunction deleteOldFiles () {\n  if (!config) {\n    return;\n  }\n\n  let dirname = path.dirname(config.winstonConfig.filename);\n  log('info', 'Removing log files longer than ' + globalConfig.configuration.logging.expirationDays + ' days');\n  fs.readdir(dirname, (err, files) => {\n    if (err) {\n      log('error', 'Error reading log files folder ' + dirname, err);\n      return;\n    }\n\n    let basename = path.basename(config.winstonConfig.filename);\n    let logFiles = getLogFilesData(files, basename, globalConfig.configuration.logging.expirationDays);\n\n    logFiles\n      .forEach(logFile => logFile.filename = dirname + '/' + logFile.filename);\n\n    if (logFiles.length) {\n      log('info', logFiles.length + ' old log files to remove');\n\n      let logFilesPromises = logFiles.map(logFile => {\n        return new Promise((resolve, reject) => {\n          fs.unlink(logFile.filename, err => {\n            if (err) {\n              log('error', 'Error removing log file ' + logFile.filename, JSON.stringify(err));\n              return reject();\n            }\n            resolve();\n          });\n        });\n      });\n\n      Promise.all(logFilesPromises)\n        .then(() => log('info', 'Log files removed successfully'));\n    } else {\n      log('info', 'No old log files to remove');\n    }\n  });\n}\n\nfunction log (level, text, metadata) {\n  return config && config.logMethod && config.logMethod(level, text, metadata);\n}"]}