{"version":3,"sources":["../../src/services/system-service.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,SAAS,QAAQ,MAAR,EAAgB,MAA7B;AAAA,IACE,SAAS,QAAQ,QAAR,CADX;AAAA,IAEE,SAAS,QAAQ,WAAR,CAFX;AAAA,IAGE,aAAa,QAAQ,eAAR,CAHf;AAAA,IAIE,kBAAkB,QAAQ,uBAAR,EAAiC,qBAAjC,CAAuD;AACvE,WAAS,IAD8D;AAEvE,UAAQ;AACN,SAAK;AAAA,aAAW,WAAW,IAAX,CAAgB,OAAhB,CAAX;AAAA;AADC;AAF+D,CAAvD,CAJpB;;AAWA,SAAS,QAAT,GAAqB;AACnB,aAAW,IAAX,CAAgB,sBAAhB;AACA,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,QAAI,OAAO,IAAI,MAAJ,EAAX;AACA,SAAK,EAAL,CAAQ,OAAR,EAAiB,YAAW;AAC1B,WAAK,IAAL,CAAU,mBAAV,EAA+B,UAAS,GAAT,EAAc,MAAd,EAAsB;AACnD,YAAI,GAAJ,EAAS;AACP,qBAAW,KAAX,CAAiB,+BAAjB,EAAkD,GAAlD;AACA,iBAAO,GAAP;AACA;AACD;;AAED,eAAO,EAAP,CAAU,OAAV,EAAmB,YAAW;AAC5B,eAAK,GAAL;AACA;AACD,SAHD;AAID,OAXD;AAYD,KAbD;;AAeA,SAAK,EAAL,CAAQ,OAAR,EAAiB,UAAS,GAAT,EAAc;AAC7B,iBAAW,KAAX,CAAiB,kCAAjB,EAAqD,GAArD;AACA,aAAO,GAAP;AACD,KAHD;;AAKA,SAAK,OAAL,CAAa;AACX,YAAM,WADK;AAEX,YAAM,EAFK;AAGX,gBAAU,OAAO,aAAP,CAAqB,QAArB,CAA8B,QAH7B;AAIX,gBAAU,OAAO,aAAP,CAAqB,QAArB,CAA8B;AAJ7B,KAAb;AAMD,GA5BM,CAAP;AA6BD;;AAED,SAAS,iBAAT,CAA4B,cAA5B,EAA4C;AAC1C,kBAAgB,iBAAhB,CAAkC,cAAlC;AACD;;AAED,SAAS,SAAT,GAAsB;AACpB,SAAO,QAAQ,OAAR,CAAgB;;AAErB,gBAAY,SAAS,MAAT;AAFS,GAAhB,CAAP;AAID;;AAED,OAAO,OAAP,GAAiB;AACf,YAAU,QADK;AAEf,aAAW,SAFI;AAGf,qBAAmB;AAHJ,CAAjB","file":"system-service.js","sourcesContent":["'use strict';\n\nlet Client = require('ssh2').Client,\n  moment = require('moment'),\n  config = require('../config'),\n  logService = require('./log-service'),\n  shutdownManager = require('node-shutdown-manager').createShutdownManager({\n    timeout: 5000,\n    logger: {\n      log: message => logService.info(message)\n    }\n  });\n\nfunction shutdown () {\n  logService.info('Shutting down server');\n  return new Promise((resolve, reject) => {\n    let conn = new Client();\n    conn.on('ready', function() {\n      conn.exec('sudo shutdown now', function(err, stream) {\n        if (err) {\n          logService.error('Shutting down command error: ', err);\n          reject(err);\n          return;\n        }\n\n        stream.on('close', function() {\n          conn.end();\n          resolve();\n        });\n      });\n    });\n\n    conn.on('error', function(err) {\n      logService.error('Shutting down connection error: ', err);\n      reject(err);\n    });\n\n    conn.connect({\n      host: '127.0.0.1',\n      port: 22,\n      username: config.configuration.shutdown.username,\n      password: config.configuration.shutdown.password\n    });\n  });\n}\n\nfunction addShutdownAction (shutdownAction) {\n  shutdownManager.addShutdownAction(shutdownAction);\n}\n\nfunction getStatus () {\n  return Promise.resolve({\n    // TODO - do not hardcode format here\n    systemTime: moment().format()\n  });\n}\n\nmodule.exports = {\n  shutdown: shutdown,\n  getStatus: getStatus,\n  addShutdownAction: addShutdownAction\n};"]}